{
    "name": "indicator_packed.yar",
    "rule": "import \"pe\"\n\nrule INDICATOR_EXE_Packed_ConfuserEx {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with ConfuserEx Mod\"\n        snort2_sid = \"930016-930018\"\n        snort3_sid = \"930005-930006\"\n    strings:\n        $s1 = \"ConfuserEx \" ascii\n        $s2 = \"ConfusedByAttribute\" fullword ascii\n        $c1 = \"Confuser.Core \" ascii wide\n        $u1 = \"Confu v\" fullword ascii\n        $u2 = \"ConfuByAttribute\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and (all of ($s*) or all of ($c*) or all of ($u*))\n}\n\nrule INDICATOR_EXE_Packed_ConfuserExMod_BedsProtector {\n    meta:\n        description = \"Detects executables packed with ConfuserEx Mod Beds Protector\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"Beds Protector v\" ascii\n        $s2 = \"Beds-Protector-v\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_ConfuserEx_Trinity {\n    meta:\n        description = \"Detects executables packed with ConfuserEx Mod Trinity Protector\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"Trinity0-protecor|\" ascii\n        $s2 = \"#TrinityProtector\" fullword ascii\n        $s3 = /Trinity\\d-protector\\|/ ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_PS2EXE {\n    meta:\n        description = \"Detects executables built or packed with PS2EXE\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"PS2EXE\" fullword ascii\n        $s2 = \"PS2EXEApp\" fullword ascii\n        $s3 = \"PS2EXEHost\" fullword ascii\n        $s4 = \"PS2EXEHostUI\" fullword ascii\n        $s5 = \"PS2EXEHostRawUI\" fullword ascii\n    condition:\n         uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_LSD {\n    meta:\n        description = \"Detects executables built or packed with LSD packer\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"This file is packed with the LSD executable packer\" ascii\n        $s2 = \"http://lsd.dg.com\" ascii\n        $s3 = \"&V0LSD!$\" fullword ascii\n    condition:\n         (uint16(0) == 0x5a4d or uint16(0)== 0x457f) and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_AspireCrypt {\n    meta:\n        description = \"Detects executables packed with AspireCrypt\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"AspireCrypt\" fullword ascii\n        $s2 = \"aspirecrypt.net\" ascii\n        $s3 = \"protected by AspireCrypt\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_Spices {\n    meta:\n        description = \"Detects executables packed with 9Rays.Net Spices.Net Obfuscator.\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"9Rays.Net Spices.Net\" ascii\n        $s2 = \"protected by 9Rays.Net Spices.Net Obfuscator\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_JAVA_Packed_Allatori {\n    meta:\n        description = \"Detects files packed with Allatori Java Obfuscator\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"# Obfuscation by Allatori Obfuscator\" ascii wide\n    condition:\n        all of them\n}\n\nrule INDICATOR_EXE_Packed_ASPack {\n    meta:\n        description = \"Detects executables packed with ASPack\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = { 00 00 ?? 2E 61 73 70 61 63 6B 00 00 }\n    condition:\n        uint16(0) == 0x5a4d and all of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".aspack\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_Titan {\n    meta:\n        description = \"Detects executables packed with Titan\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = { 00 00 ?? 2e 74 69 74 61 6e 00 00 }\n    condition:\n        uint16(0) == 0x5a4d and all of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".titan\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_aPLib {\n    meta:\n        description = \"Detects executables packed with aPLib.\"\n        author = \"ditekSHen\"\n    strings:\n        $header = { 41 50 33 32 18 00 00 00 [0-35] 4D 38 5A 90 }\n    condition:\n        ((uint32(0) == 0x32335041 and uint32(24) == 0x905a384d) or (uint16(0) == 0x5a4d and $header ))\n}\n\nrule INDICATOR_EXE_Packed_LibZ {\n    meta:\n        description = \"Detects executables built or packed with LibZ\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"LibZ.Injected\" fullword ascii\n        $s2 = \"{0:N}.dll\" fullword wide\n        $s3 = \"asmz://(?<guid>[0-9a-fA-F]{32})/(?<size>[0-9]+)(/(?<flags>[a-zA-Z0-9]*))?\" fullword wide\n        $s4 = \"Software\\\\Softpark\\\\LibZ\" fullword wide\n        $s5 = \"(AsmZ/{\" wide\n        $s6 = \"asmz://\" ascii\n        $s7 = \"GetRegistryDWORD\" ascii\n        $s8 = \"REGISTRY_KEY_NAME\" fullword ascii\n        $s9 = \"REGISTRY_KEY_PATH\" fullword ascii\n        $s10 = \"InitializeDecoders\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and 5 of them\n}\n\nrule INDICATOR_EXE_Packed_Enigma {\n    meta:\n        description = \"Detects executables packed with Enigma\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \".enigma0\" fullword ascii\n        $s2 = \".enigma1\" fullword ascii\n        $s3 = \".enigma2\" fullword ascii\n        $s4 = \".enigma3\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and 2 of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".enigma0\" or\n                pe.sections[i].name == \".enigma1\" or\n                pe.sections[i].name == \".enigma2\" or\n                pe.sections[i].name == \".enigma3\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Python_Byte_Compiled {\n    meta:\n        description = \"Detects python-byte compiled executables\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"b64decode\" ascii\n        $s2 = \"decompress\" ascii\n    condition:\n        uint32(0) == 0x0a0df303 and filesize < 5KB and all of them\n}\n\nrule INDICATOR_MSI_EXE2MSI {\n    meta:\n        description = \"Detects executables converted to .MSI packages using a free online converter.\"\n        author = \"ditekSHen\"\n    strings:\n        $winin = \"Windows Installer\" ascii\n        $title = \"Exe to msi converter free\" ascii\n    condition:\n        uint32(0) == 0xe011cfd0 and ($winin and $title)\n}\n\nrule INDICATOR_EXE_Packed_MPress {\n    meta:\n        description = \"Detects executables built or packed with MPress PE compressor\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \".MPRESS1\" fullword ascii\n        $s2 = \".MPRESS2\" fullword ascii\n    condition:\n         uint16(0) == 0x5a4d and 1 of them or\n         for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".MPRESS1\" or\n                pe.sections[i].name == \".MPRESS2\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_Nate {\n    meta:\n        description = \"Detects executables built or packed with Nate packer\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"@.nate0\" fullword ascii\n        $s2 = \"`.nate1\" fullword ascii\n    condition:\n         uint16(0) == 0x5a4d and 1 of them or\n         for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".nate0\" or\n                pe.sections[i].name == \".nate1\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_VMProtect {\n    meta:\n        description = \"Detects executables packed with VMProtect.\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \".vmp0\" fullword ascii\n        $s2 = \".vmp1\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".vmp0\" or\n                pe.sections[i].name == \".vmp1\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_DotNET_Encrypted {\n    meta:\n        description = \"Detects encrypted or obfuscated .NET executables\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"FromBase64String\" fullword ascii\n        $s2 = \"ToCharArray\" fullword ascii\n        $s3 = \"ReadBytes\" fullword ascii\n        $s4 = \"add_AssemblyResolve\" fullword ascii\n        $s5 = \"MemoryStream\" fullword ascii\n        $s6 = \"CreateDecryptor\" fullword ascii\n\n         // 08 00 00 00 00 00 1e 01 00 01 00 54 02 16 WrapNonExceptionThrows 01\n        $bytes1 = { 08 01 00 08 00 00 00 00 00 1e 01 00 01 00 54 02\n                    16 57 72 61 70 4e 6f 6e 45 78 63 65 70 74 69 6f\n                    6e 54 68 72 6f 77 73 01 }\n        // 00 00 BSJB...v2.0.50727 00 00 00 00 05 00\n        // 00 00 BSJB...v4.0.30319 00 00 00 00 05 00\n        $bytes2 = { 00 00 42 53 4a 42 01 00 01 00 00 00 00 00 0c 00\n                    00 00 76 3? 2e 3? 2e ?? ?? ?? ?? ?? 00 00 00 00\n                    05 00 }\n        // #Strings...#US...#GUID...#Blob\n        $bytes3 = { 00 00 23 53 74 72 69 6e 67 73 00 00 00 00 [5] 00\n                    00 00 23 55 53 00 [5] 00 00 00 23 47 55 49 44 00\n                    00 00 [6] 00 00 23 42 6c 6f 62 00 00 00 }\n        // .GetString.set_WorkingDirectory.WaitForExit.Close.Thread.System.Threading.Sleep.ToInt32.get_MainModule.ProcessModule.get_FileName.Split.\n        $bytes4 = { 00 47 65 74 53 74 72 69 6e 67 00 73 65 74 5f 57\n                    6f 72 6b 69 6e 67 44 69 72 65 63 74 6f 72 79 00\n                    57 61 69 74 46 6f 72 45 78 69 74 00 43 6c 6f 73\n                    65 00 54 68 72 65 61 64 00 53 79 73 74 65 6d 2e\n                    54 68 72 65 61 64 69 6e 67 00 53 6c 65 65 70 00\n                    54 6f 49 6e 74 33 32 00 67 65 74 5f 4d 61 69 6e\n                    4d 6f 64 75 6c 65 00 50 72 6f 63 65 73 73 4d 6f\n                    64 75 6c 65 00 67 65 74 5f 46 69 6c 65 4e 61 6d\n                    65 00 53 70 6c 69 74 00 }\n    condition:\n        uint16(0) == 0x5a4d and 3 of ($bytes*) and all of ($s*)\n}\n\nrule INDICATOR_PY_Packed_PyMinifier {\n    meta:\n        description = \"Detects python code potentially obfuscated using PyMinifier\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"exec(lzma.decompress(base64.b64decode(\"\n    condition:\n        (uint32(0) == 0x6f706d69 or uint16(0) == 0x2123 or uint16(0) == 0x0a0d or uint16(0) == 0x5a4d) and all of them\n}\n\nrule INDICATOR_EXE_Packed_BoxedApp {\n    meta:\n        description = \"Detects executables packed with BoxedApp\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"BoxedAppSDK_HookFunction\" fullword ascii\n        $s2 = \"BoxedAppSDK_StaticLib.cpp\" ascii\n        $s3 = \"embedding BoxedApp into child processes: %s\" ascii\n        $s4 = \"GetCommandLineA preparing to intercept\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 2 of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name contains \".bxpck\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_eXPressor {\n    meta:\n        description = \"Detects executables packed with eXPressor\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"eXPressor_InstanceChecker_\" fullword ascii\n        $s2 = \"This application was packed with an Unregistered version of eXPressor\" ascii\n        $s3 = \", please visit www.cgsoftlabs.ro\" ascii\n        $s4 = /eXPr-v\\.\\d+\\.\\d+/ ascii\n    condition:\n        uint16(0) == 0x5a4d and 2 of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name contains \".ex_cod\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_MEW {\n    meta:\n        description = \"Detects executables packed with MEW\"\n        author = \"ditekSHen\"\n    condition:\n        uint16(0) == 0x5a4d and\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \"MEW\" or\n                pe.sections[i].name == \"\\x02\\xd2u\\xdb\\x8a\\x16\\xeb\\xd4\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_RLPack {\n    meta:\n        description = \"Detects executables packed with RLPACK\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \".packed\" fullword ascii\n        $s2 = \".RLPack\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and all of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".RLPack\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_Cassandra {\n    meta:\n        description = \"Detects executables packed with Cassandra/CyaX\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = \"AntiEM\" fullword ascii wide\n        $s2 = \"AntiSB\" fullword ascii wide\n        $s3 = \"Antis\" fullword ascii wide\n        $s4 = \"XOR_DEC\" fullword ascii wide\n        $s5 = \"StartInject\" fullword ascii wide\n        $s6 = \"DetectGawadaka\" fullword ascii wide\n        $c1 = \"CyaX-Sharp\" ascii wide\n        $c2 = \"CyaX_Sharp\" ascii wide\n        $c3 = \"CyaX-PNG\" ascii wide\n        $c4 = \"CyaX_PNG\" ascii wide\n        $pdb = \"\\\\CyaX\\\\obj\\\\Debug\\\\CyaX.pdb\" ascii wide\n    condition:\n        (uint16(0) == 0x5a4d and (4 of ($s*) or 2 of ($c*) or $pdb)) or (7 of them)\n}\n\nrule INDICATOR_EXE_Packed_ConfuserEx_Custom {\n    meta:\n        description = \"Detects executables packed with ConfuserEx Custom, outside of GIT\"\n        author = \"ditekSHen\"\n    strings:\n        $s1 = { 43 6f 6e 66 75 73 65 72 45 78 20 76 [1-2] 2e [1-2] 2e [1-2] 2d 63 75 73 74 6f 6d }\n    condition:\n        uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_Themida {\n    meta:\n        description = \"Detects executables packed with Themida\"\n        author = \"ditekSHen\"\n        snort2_sid = \"930067-930069\"\n        snort3_sid = \"930024\"\n    strings:\n        $s1 = \"@.themida\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and all of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \".themida\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_SilentInstallBuilder {\n    meta:\n        description = \"Detects executables packed with Silent Install Builder\"\n        author = \"ditekSHen\"\n        snort2_sid = \"930070-930072\"\n        snort3_sid = \"930025\"\n    strings:\n        $s1 = \"C:\\\\Users\\\\Operations\\\\Source\\\\Workspaces\\\\Sib\\\\Sibl\\\\Release\\\\Sibuia.pdb\" fullword ascii\n        $s2 = \"->mb!Silent Install Builder Demo Package.\" fullword wide\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_NyanXCat_CSharpLoader {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects .NET executables utilizing NyanX-CAT C# Loader\"\n    strings:\n        $s1 = { 00 50 72 6f 67 72 61 6d 00 4c 6f 61 64 65 72 00 4e 79 61 6e 00 }\n    condition:\n        uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_Loader {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects packed executables observed in Molerats\"\n    strings:\n        $l1 = \"loaderx86.dll\" fullword ascii\n        $l2 = \"loaderx86\" fullword ascii\n        $l3 = \"loaderx64.dll\" fullword ascii\n        $l4 = \"loaderx64\" fullword ascii\n        $s1 = \"ImportCall_Zw\" wide\n        $s2 = \"DllInstall\" ascii wide\n        $s3 = \"evb*.tmp\" fullword wide\n        $s4 = \"WARNING ZwReadFileInformation\" ascii\n        $s5 = \"LoadLibrary failed with module \" fullword wide\n    condition:\n        uint16(0) == 0x5a4d and 2 of ($l*) and 4 of ($s*)\n}\n\nrule INDICATOR_EXE_Packed_Bonsai {\n    meta:\n        description = \"Detects .NET executables developed using Bonsai\"\n    strings:\n        $bonsai1 = \"<Bonsai.\" ascii\n        $bonsai2 = \"Bonsai.Properties\" ascii\n        $bonsai3 = \"Bonsai.Core.dll\" fullword wide\n        $bonsai4 = \"Bonsai.Design.\" wide\n    condition:\n        uint16(0) == 0x5a4d and 2 of ($bonsai*)\n}\n\nrule INDICATOR_EXE_Packed_TriumphLoader {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects TriumphLoader\"\n        cape_type = \"TriumphLoader\"\n    strings:\n        $id1 = \"User-Agent: TriumphLoader\" ascii wide\n        $id2 = \"\\\\loader\\\\absent-loader-master\\\\client\\\\full\\\\absentclientfull\\\\absentclientfull\\\\absent\\\\json.hpp\" wide\n        $id3 = \"\\\\triumphloader\\\\triumphloaderfiles\\\\triumph\\\\json.h\" wide\n        $s1 = \"current == '\\\\\\\"'\" fullword wide\n        $s2 = \"00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263\" ascii\n        $s3 = \"646566676869707172737475767778798081828384858687888990919293949596979899object key\" fullword ascii\n        $s4 = \"endptr == token_buffer.data() + token_buffer.size()\" fullword wide\n        $s5 = \"last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10\" fullword wide\n        $s6 = \"p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10\" fullword wide\n    condition:\n        uint16(0) == 0x5a4d and (1 of ($id*) or all of ($s*) or (3 of ($s*) and 1 of ($id*)) or (4 of them and pe.imphash() == \"784001f4b755832ae9085d98afc9ce83\"))\n}\n\nrule INDICATOR_EXE_Packed_LLVMLoader {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects LLVM obfuscator/loader\"\n    strings:\n        $s1 = \"exeLoaderDll_LLVMO.dll\" fullword ascii\n        $b = { 64 6c 6c 00 53 74 61 72 74 46 75 6e 63 00 00 00\n               ?? ?? 00 00 00 00 00 00 00 00 00 ?? 96 01 00 00\n               ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n               00 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? 00 00\n               00 00 00 00 00 00 00 00 00 00 00 ?? ?? 45 78 69\n               74 50 72 6f 63 65 73 73 00 4b 45 52 4e 45 4c 33\n               32 2e 64 6c 6c 00 00 00 00 00 00 }\n    condition:\n        (uint16(0) == 0x5a4d or uint16(0) == 0x0158) and ((pe.exports(\"StartFunc\") and 1 of ($s*)) or all of ($s*) or ($b))\n}\n\nrule INDICATOR_EXE_Packed_NoobyProtect {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with NoopyProtect\"\n    strings:\n        $s1 = \"NoobyProtect SE\" ascii\n    condition:\n        uint16(0) == 0x5a4d and all of them or\n        for any i in (0 .. pe.number_of_sections) : (\n            (\n                pe.sections[i].name == \"SE\"\n            )\n        )\n}\n\nrule INDICATOR_EXE_Packed_nBinder {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with nBinder\"\n    strings:\n        $s1 = \"This file was created using nBinder\" ascii\n        $s2 = \"Warning: Contains binded files that may pose a security risk.\" ascii\n        $s3 = \"a file created with nBinder\" ascii\n        $s4 = \"name=\\\"NKProds.nBinder.Unpacker\\\" type=\\\"win\" ascii\n        $s5 = \"<description>nBinder Unpacker. www.nkprods.com</description>\" ascii\n        $s6 = \"nBinder Unpacker (C) NKProds\" wide\n        $s7 = \"\\\\Proiecte\\\\nBin\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 2 of them\n}\n\nrule INDICATOR_EXE_Packed_SmartAssembly {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with SmartAssembly\"\n    strings:\n        $s1 = \"PoweredByAttribute\" fullword ascii\n        $s2 = \"SmartAssembly.Attributes\" fullword ascii\n        $s3 = \"Powered by SmartAssembly\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 2 of them\n}\n\nrule INDICATOR_EXE_Packed_BlackMoon {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables using BlackMoon RunTime\"\n    strings:\n        $s1 = \"blackmoon\" fullword ascii\n        $s2 = \"BlackMoon RunTime Error:\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_AgileDotNet {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with Agile.NET / CliSecure\"\n    strings:\n        $x1 = \"AgileDotNetRT\" fullword ascii\n        $x2 = \"AgileDotNetRT64\" fullword ascii\n        $x3 = \"<AgileDotNetRT>\" fullword ascii\n        $x4 = \"AgileDotNetRT.dll\" fullword ascii\n        $x5 = \"AgileDotNetRT64.dll\" fullword ascii\n        $x6 = \"get_AgileDotNet\" ascii\n        $x7 = \"useAgileDotNetStackFrames\" fullword ascii\n        $x8 = \"AgileDotNet.\" ascii\n        $x9 = \"://secureteam.net/webservices\" ascii\n        $x10 = \"AgileDotNetProtector.\" ascii\n        $s1 = \"Callvirt\" fullword ascii\n        $s2 = \"_Initialize64\" fullword ascii\n        $s3 = \"_AtExit64\" fullword ascii\n        $s4 = \"DomainUnload\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and (2 of ($x*) or (1 of ($x*) and 2 of ($s*)) or all of ($s*))\n}\n\nrule INDICATOR_EXE_Packed_Fody {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables manipulated with Fody\"\n    strings:\n        $s1 = \"ProcessedByFody\" fullword ascii wide\n    condition:\n        uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_Costura {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with Costura DotNetGuard\"\n    strings:\n        $s1 = \"DotNetGuard\" fullword ascii\n        $s2 = \"costura.\" ascii wide\n        $s3 = \"AssemblyLoader\" fullword ascii wide\n    condition:\n        uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_SimplePolyEngine {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with Sality Polymorphic Code Generator or Simple Poly Engine or Sality\"\n    strings:\n        $s1 = \"Simple Poly Engine v\" ascii\n        $b1 = \"yrf<[LordPE]\" ascii\n        $b2 = \"Hello world!\" fullword wide\n    condition:\n        uint16(0) == 0x5a4d and (all of ($s*) or all of ($b*))\n}\n\nrule INDICATOR_EXE_Packed_dotNetProtector {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with dotNetProtector\"\n    strings:\n        $s1 = \"dotNetProtector\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_DotNetReactor {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with unregistered version of .NET Reactor\"\n    strings:\n        $s1 = \"is protected by an unregistered version of Eziriz's\\\".NET Reactor\\\"!\" wide\n        $s2 = \"is protected by an unregistered version of .NET Reactor!\\\" );</script>\" wide\n        $s3 = \"is protected by an unregistered version of Eziriz's \\\".NET Reactor\\\"!\" wide\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_Dotfuscator {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with Dotfuscator\"\n    strings:\n        $s1 = \"DotfuscatorAttribute\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_DNGuard {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with DNGuard\"\n    strings:\n        $s1 = \"DNGuard Runtime library\" wide\n        $s2 = \"[*=*]This application is expired ![*=*]\" fullword wide\n        $s3 = \"DNGuard.Runtime\" ascii wide\n        $s4 = \"EnableHVM\" ascii\n        $s5 = \"DNGuard.SDK\" ascii\n        $s6 = \"DNGuard HVM Runtime\" wide\n        $s7 = \"HVMRuntm.dll\" wide\n    condition:\n        uint16(0) == 0x5a4d and 2 of them\n}\n\nrule INDICATOR_EXE_Packed_NETProtectIO {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with NETProtect.IO\"\n    strings:\n        $s1 = \"NETProtect.IO v\" ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_KoiVM {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with or use KoiVM\"\n    strings:\n        $s1 = \"KoiVM v\" ascii wide\n        $s2 = \"DarksVM \" ascii wide\n        $s3 = \"Koi.NG\" ascii wide\n        $s4 = \"KoiVM.\" ascii wide\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_Goliath {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with Goliath\"\n    strings:\n        $s1 = \"ObfuscatedByGoliath\" fullword ascii\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_Babel {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with Babel\"\n    strings:\n        $s1 = \"BabelObfuscatorAttribute\" fullword ascii\n        $m1 = \";babelvm;smoketest\" ascii wide\n        $m2 = { 62 00 61 00 62 00 65 00 6c 00 76 00 6d [1-20] 73 00 6d 00 6f 00 6b 00 65 00 74 00 65 00 73 00 74 }\n        $m3 = \"babelvm\" wide\n        $m4 = \"smoketest\" wide\n        $m5 = /lic[A-F0-9]{8}/ ascii wide // in particular 'lic70F93782'\n    condition:\n        ((uint16(0) == 0x5a4d and 1 of ($s*)) or (2 of ($m*)))\n}\n\nrule INDICATOR_EXE_Packed_CryptoObfuscator {\n    meta:\n        author = \"bartblaze\"\n        description = \"Detects executables packed with CryptoObfuscator\"\n    strings:\n        $s1 = \"created with an evaluation version of CryptoObfuscator\" ascii wide\n        $s2 = \"\\\\CryptoObfuscator_Output\\\\\" ascii wide\n    condition:\n        uint16(0) == 0x5a4d and 1 of them\n}\n\nrule INDICATOR_EXE_Packed_GEN01 {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detect packed .NET executables. Mostly AgentTeslaV4.\"\n    strings:\n        $c1 = \"com.apple.Safari\" fullword ascii\n        $c2 = \"Unable to resolve HTTP prox\" fullword ascii\n        $c3 = \"rotcetorP rekciP laitnederC swodniW$\" fullword ascii\n        $c4 = \"laitnederC drowssaP beW swodniW$\" fullword ascii\n        $s1 = \"Accounts\" fullword wide\n        $s2 = \"logins\" fullword wide\n        $s3 = \"sha512\" fullword wide\n        $s4 = \"credential\" fullword wide\n    condition:\n        uint16(0) == 0x5a4d and 2 of ($c*) and all of ($s*)\n}\n\nrule INDICATOR_EXE_Packed_CryptoProtector {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects executables packed with CryptoProtector / CryptoObfuscator\"\n    strings:\n        $s1 = \"CryptoObfuscator\" ascii\n        $s2 = \"CryptoProtector [{0}]\" wide\n        $e1 = /[A-F0-9]{7,8}\\.Crypto/ ascii\n    condition:\n        uint16(0) == 0x5a4d and all of ($s*) or (($s1) and #e1 > 10) or all of them\n}\n\nrule INDICATOR_EXE_Packed_Yano {\n  meta:\n      author = \"ditekSHen\"\n      description = \"Detects executables packed with Yano Obfuscator\"\n  strings:\n      $s1 = \"YanoAttribute\" fullword ascii\n      $s2 = \"StripAfterObfuscation\" fullword ascii\n  condition:\n      uint16(0) == 0x5a4d and all of them\n}\n\nrule INDICATOR_EXE_Packed_GolangBypassAV {\n    meta:\n        author = \"ditekSHen\"\n        description = \"Detects Go executables using GolangBypassAV\"\n    strings:\n        $s1 = \"/GolangBypassAV/gen/\" ascii\n    condition:\n        (uint16(0) == 0x5a4d or uint16(0) == 0x457f) and 1 of them\n}\n",
    "uploadedBy": "f0b33c9c-0019-4046-984b-f6f3d95dea61",
    "category": "yar",
    "uploadedAt": "2025-05-07T09:54:43.605Z",
    "status": "active"
}